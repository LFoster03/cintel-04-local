[{"name": "app.py", "content": "import palmerpenguins\nimport pandas as pd\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom shiny import reactive, render, req\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\n\n# Load penguins dataset\npenguins_df = palmerpenguins.load_penguins().dropna()\n\n# ----- Page Setup -----\nui.page_opts(title=\"Penguin Data Exploration Histograms\", fillable=True)\n\n# ----- Sidebar -----\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n    )\n\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 20)\n\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 5, 50, 20)\n\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=True\n    )\n\n    # Add island checkbox group\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Select Islands\",\n        [\"Biscoe\", \"Dream\", \"Torgersen\"],\n        selected=[\"Biscoe\", \"Dream\", \"Torgersen\"],\n        inline=True\n    )\n\n    ui.hr()\n\n    ui.a(\"GitHub\", href=\"https://github.com/LFoster03/cintel-03-reactive/tree/main\", target=\"_blank\")\n\n\n# ----- Reactive Filter -----\n@reactive.calc\ndef filtered_penguins():\n    req(input.selected_species_list())\n    req(input.selected_island_list())\n    species_selected = input.selected_species_list()\n    island_selected = input.selected_island_list()\n    species_match = penguins_df[\"species\"].isin(species_selected)\n    island_match = penguins_df[\"island\"].isin(island_selected)\n    return penguins_df[species_match & island_match]\n\n\n# ----- Data Table + Data Grid -----\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Table: Filtered Species & Islands\")\n\n        @render.data_frame\n        def table_view():\n            return render.DataTable(filtered_penguins())\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Grid: Filtered Species & Islands\")\n\n        @render.data_frame\n        def grid_view():\n            return render.DataGrid(filtered_penguins())\n\n\n# ----- Plotly & Seaborn Histograms -----\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram: Species\")\n\n        @render_plotly\n        def plotly_histogram():\n            df = filtered_penguins()\n            attr = input.selected_attribute()\n            bins = input.plotly_bin_count()\n            if attr and bins:\n                return px.histogram(df, x=attr, nbins=bins, color=\"species\", title=f\"Plotly Histogram of {attr}\")\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram: Species\")\n\n        @render.plot\n        def seaborn_histogram():\n            df = filtered_penguins()\n            attr = input.selected_attribute()\n            bins = input.seaborn_bin_count()\n            if attr and bins:\n                plt.figure(figsize=(6, 4))\n                sns.histplot(data=df, x=attr, hue=\"species\", bins=bins)\n                plt.title(f\"Seaborn Histogram of {attr}\")\n                plt.tight_layout()\n\n\n# ----- Plotly Scatterplot -----\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Species\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        df = filtered_penguins()\n        return px.scatter(\n            df,\n            x=\"bill_length_mm\",\n            y=\"flipper_length_mm\",\n            color=\"species\",\n            symbol=\"species\",\n            size=\"body_mass_g\",\n            hover_data=[\"species\", \"island\"],\n            title=\"Scatterplot of Bill Length vs Flipper Length\"\n        )\n\n# ----- Island Histogram -----\nwith ui.card(full_screen=True):\n    ui.card_header(\"Penguin Count by Species and Island\")\n\n    @render_plotly\n    def species_island_histogram():\n        df = filtered_penguins()\n        if not df.empty:\n            return px.histogram(\n                df,\n                x=\"species\",              # You can also try \"island\" here\n                color=\"island\",           # Try color=\"species\" if you flip axes\n                barmode=\"group\",\n                title=\"Count of Penguins by Species and Island\"\n            )\n        else:\n            # Show empty chart message\n            return px.histogram(\n                pd.DataFrame({\"x\": [], \"y\": []}),\n                title=\"No data to display. Try adjusting filters.\"\n            )\n", "type": "text"}]